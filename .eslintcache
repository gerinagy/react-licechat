[{"/Library/WebServer/Documents/Projects/react-livechat/src/App.js":"1","/Library/WebServer/Documents/Projects/react-livechat/src/reportWebVitals.js":"2","/Library/WebServer/Documents/Projects/react-livechat/src/index.js":"3"},{"size":2808,"mtime":1606383343101,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606251361408,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1606251361406,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1igiw8i",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Library/WebServer/Documents/Projects/react-livechat/src/App.js",["15","16","17"],"import React, { useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nimport { useRef } from 'react';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDCzcukPLGnEPThI2_86hIeqHXTHjv4HLs\",\n  authDomain: \"react-livechat-9c29d.firebaseapp.com\",\n  databaseURL: \"https://react-livechat-9c29d.firebaseio.com\",\n  projectId: \"react-livechat-9c29d\",\n  storageBucket: \"react-livechat-9c29d.appspot.com\",\n  messagingSenderId: \"1034760244529\",\n  appId: \"1:1034760244529:web:ea91f5ac20bf341e0e7410\"\n})\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-Header\">\n\n\n      </header>\n\n      <section className=\"App-main\">\n        {user ? <ChatRoom /> : <SignIn />}\n        <SignOut/>\n\n      </section>\n    </div>\n  );\n}\n\n\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n\n  );\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  );\n}\n\n\nfunction ChatRoom() {\n\n\n  const dummy = useRef(); \n   \n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  // Try\n  // const dummy = messagesRef;\n\n\n  const sendMessage = async (e) => {\n\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n\n  }\n\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n        <div ref={dummy} ></div>\n\n\n      </main>\n\n      <form onSubmit={sendMessage} >\n\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n\n        <button type=\"submit\">▶️</button>\n\n\n      </form>\n\n\n\n\n    </>\n  )\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={'message ${messageClass}'}>\n      <img src=\"{photoURL}\" />\n\n\n\n      <p>{text}</p>\n    </div>\n  )\n}\n\n\n\n\n\nexport default App;\n","/Library/WebServer/Documents/Projects/react-livechat/src/reportWebVitals.js",[],"/Library/WebServer/Documents/Projects/react-livechat/src/index.js",[],{"ruleId":"18","severity":1,"message":"19","line":144,"column":9,"nodeType":"20","messageId":"21","endLine":144,"endColumn":21},{"ruleId":"22","severity":1,"message":"23","line":147,"column":21,"nodeType":"24","messageId":"25","endLine":147,"endColumn":46},{"ruleId":"26","severity":1,"message":"27","line":148,"column":7,"nodeType":"28","endLine":148,"endColumn":31},"no-unused-vars","'messageClass' is assigned a value but never used.","Identifier","unusedVar","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]